/**
 * Bolzplatz 2006
 * Copyright (C) 2006 by Xenoage Software
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */
package com.xenoage.bp2k6.util;

import java.awt.Color;
import java.util.ArrayList;
import javax.vecmath.Vector3f;
import net.sf.jirr.*;


/**
 * This class provides some useful casting methods.
 *
 * @author   Andi
 */
public class Cast
{

  public static String[] StringArrayListToStringArray(
    ArrayList<String> src)
  {
    String[] ret = new String[src.size()];
    for (int i = 0; i < src.size(); i++)
      ret[i] = src.get(i);
    return ret;
  }


  public static String intToString(int val, int minDigits)
  {
    String ret = String.valueOf(val);
    while (ret.length() < minDigits)
    {
      ret = "0" + ret;
    }
    return ret;
  }


  public static vector3df Vector3ftovector3df(Vector3f v)
  {
    return new vector3df(v.x, v.y, v.z);
  }
  
  
  public static vector3df Vector3ftovector3df(Vector3f v, float scale)
  {
    return new vector3df(v.x * scale, v.y * scale, v.z * scale);
  }


  private static position2di nativePosition2di = new position2di();
  private static recti nativeRecti[] = new recti[2];
  static
  {
    for (int i = 0; i < nativeRecti.length; i++)
      nativeRecti[i] = new recti();
  }
  private static int nativeRectiCurrentIndex = 0;
  public static recti Rect2iToIrrlichtRecti(Rect2i r)
  {
    //set Irrlicht rect values. we do this quite intricately
    //with 2 position2di-instances, but this is the only way to
    //change the rect's values and to avoid creating a new rect instance.
    //Attention: Do not use more than two values generated by this method
    //in one call at once (or increase the pool of rectis)
    nativeRectiCurrentIndex = (nativeRectiCurrentIndex + 1) % nativeRecti.length;
    nativePosition2di.setX(r.x1);
    nativePosition2di.setY(r.y1);
    nativeRecti[nativeRectiCurrentIndex].setUpperLeftCorner(nativePosition2di);
    nativePosition2di.setX(r.x2);
    nativePosition2di.setY(r.y2);
    nativeRecti[nativeRectiCurrentIndex].setLowerRightCorner(nativePosition2di);
    return nativeRecti[nativeRectiCurrentIndex];
  }


  private static SColor nativeSColor = new SColor();
  public static SColor ColorToIrrlichtSColor(Color c)
  {
    nativeSColor.set(c.getAlpha(), c.getRed(), c.getGreen(), c.getBlue());
    return nativeSColor;
  }

}
